"""
Django settings for waterbill project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import sys
import os
from pathlib import Path
from datetime import timedelta

import environ

# Constantes pour les limites de throttling
TEST_THROTTLE_RATE = "1000/minute"
TEST_THROTTLE_HOUR = "10000/hour"
TEST_THROTTLE_SECOND = "1000/second"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environ
env = environ.Env(
    DEBUG=(bool, False),
    SECRET_KEY=(str, ""),
    DATABASE_URL=(str, "sqlite:///db.sqlite3"),
    FRONTEND_URL=(str, "https://waterbill.app"),
)

# Charger .env (UTF-8 attendu)
env_file = BASE_DIR / ".env"
if env_file.exists():
    try:
        environ.Env.read_env(env_file)
    except UnicodeDecodeError as e:
        raise RuntimeError(
            "Votre fichier .env doit être enregistré en UTF-8 (sans BOM). "
            "Ouvrez-le et réenregistrez-le en UTF-8, puis relancez."
        ) from e

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG", default=True)

ALLOWED_HOSTS = ["localhost", "127.0.0.1", "0.0.0.0"]

# Frontend URL pour les liens de redirection SMS
FRONTEND_URL = env("FRONTEND_URL")


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "drf_spectacular",
    "django_filters",
]

LOCAL_APPS = [
    "core",
    "users",
    "billing",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "waterbill.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "waterbill.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuration de la base de données
# Utilise DATABASE_URL si définie (Docker), sinon SQLite pour le développement local
if env("DATABASE_URL", default=""):
    # Configuration PostgreSQL via DATABASE_URL (Docker)
    DATABASES = {"default": env.db()}
else:
    # Configuration SQLite pour le développement local
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "fr-fr"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Configuration du modèle utilisateur personnalisé
AUTH_USER_MODEL = "users.User"

# Django REST Framework Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    # Configuration du throttling
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        # Limite élevée pour les tests
        "anon": TEST_THROTTLE_HOUR if os.getenv("DJANGO_TEST_MODE") else "500/hour",
        # Limite élevée pour les tests
        "user": TEST_THROTTLE_HOUR if os.getenv("DJANGO_TEST_MODE") else "2000/hour",
        # Limite élevée pour les tests
        "login": TEST_THROTTLE_RATE if os.getenv("DJANGO_TEST_MODE") else "15/minute",
        # Limite élevée pour les tests
        "register": (
            TEST_THROTTLE_RATE if os.getenv(
                "DJANGO_TEST_MODE") else "10/minute"
        ),
        # Limite élevée pour les tests
        "auth": TEST_THROTTLE_RATE if os.getenv("DJANGO_TEST_MODE") else "30/minute",
        # Limite élevée pour les tests
        "burst": TEST_THROTTLE_SECOND if os.getenv("DJANGO_TEST_MODE") else "50/second",
        # Limite élevée pour les tests
        "activate": (
            TEST_THROTTLE_RATE if os.getenv(
                "DJANGO_TEST_MODE") else "20/minute"
        ),
        # Limite élevée pour les tests
        "resend_code": (
            TEST_THROTTLE_RATE if os.getenv("DJANGO_TEST_MODE") else "5/minute"
        ),
        # Throttling pour les opérations d'administration
        "admin": "1000/hour",
        # Limite élevée pour les tests
        "phone_based": (
            TEST_THROTTLE_RATE if os.getenv("DJANGO_TEST_MODE") else "10/hour"
        ),
    },
}


# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

CORS_ALLOW_CREDENTIALS = True

# drf-spectacular Configuration
SPECTACULAR_SETTINGS = {
    "TITLE": "WaterBill API",
    "DESCRIPTION": "API pour la gestion de facturation d'eau",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SORT_OPERATIONS": False,
    "ENUM_NAME_OVERRIDES": {
        "ValidationErrorEnum": "drf_spectacular.openapi.AutoSchema",
    },
    "POSTPROCESSING_HOOKS": [],
    "PREPROCESSING_HOOKS": [],
    "SCHEMA_PATH_PREFIX": "/api/",
    "SCHEMA_PATH_PREFIX_TRIM": False,
    # Correction pour respecter les permissions AllowAny
    "APPEND_COMPONENTS": {
        "securitySchemes": {
            "jwtAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
            }
        }
    },
    # Ne pas ajouter automatiquement la sécurité JWT à tous les endpoints
    "SECURITY": [],
    # Configuration de sécurité par défaut
    "SECURITY_DEFINITIONS": {
        "jwtAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        }
    },
}

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs" / "django.log",
            "formatter": "verbose",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "waterbill": {
            "handlers": ["file", "console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / "logs", exist_ok=True)

# Cache Configuration
# Utilise Redis si disponible (Docker), sinon cache local pour les tests
if env("CACHE_URL", default=""):
    # Configuration Redis (Docker)
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": env("CACHE_URL"),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "CONNECTION_POOL_KWARGS": {
                    "max_connections": 50,
                    "retry_on_timeout": True,
                },
            },
            "KEY_PREFIX": "waterbill",
            "VERSION": 1,
            "TIMEOUT": 300,  # 5 minutes par défaut
        }
    }
else:
    # Configuration cache local pour les tests et développement local
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
            "TIMEOUT": 300,
            "OPTIONS": {
                "MAX_ENTRIES": 1000,
            },
        }
    }

# JWT Configuration - Sécurisée et optimisée pour WaterBill
SIMPLE_JWT = {
    # === DURÉES DE VIE DES TOKENS ===
    # Augmenté pour une meilleure UX
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    # Augmenté pour réduire les reconnexions
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    # Rotation automatique des refresh tokens
    "ROTATE_REFRESH_TOKENS": True,
    # Blacklist des anciens refresh tokens
    "BLACKLIST_AFTER_ROTATION": True,
    # === SÉCURITÉ ===
    # Mise à jour de la dernière connexion
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",  # Algorithme de signature sécurisé
    # Clé JWT séparée
    "SIGNING_KEY": env("JWT_SECRET_KEY", default=SECRET_KEY),
    # Pas de clé de vérification publique
    "VERIFYING_KEY": None,
    "AUDIENCE": None,  # Pas d'audience spécifique
    "ISSUER": "waterbill-api",  # Émetteur identifié
    "JWK_URL": None,  # Pas de JWK URL
    # === TOLÉRANCE ET VALIDATION ===
    "LEEWAY": 0,  # Pas de tolérance temporelle
    # Type d'en-tête d'autorisation
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # Nom de l'en-tête HTTP
    # === IDENTIFICATION UTILISATEUR ===
    "USER_ID_FIELD": "id",  # Champ ID utilisateur
    "USER_ID_CLAIM": "user_id",  # Claim JWT pour l'ID utilisateur
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    # === CLASSES DE TOKENS ===
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",  # Claim pour le type de token
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",  # Claim JTI pour l'unicité
    # === SERIALIZERS PERSONNALISÉS ===
    "TOKEN_OBTAIN_SERIALIZER": "users.serializers.CustomTokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    # === CONFIGURATION AVANCÉE ===
    "TOKEN_OBTAIN_PAIR_SERIALIZER": "users.serializers.CustomTokenObtainPairSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

# Configuration spécifique pour les tests
if "test" in sys.argv or "pytest" in sys.modules:
    # Configuration simplifiée pour les tests
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.Argon2PasswordHasher",
    ]

    # Désactiver les migrations pour les tests
    class DisableMigrations:
        def __contains__(self, item):
            return True

        def __getitem__(self, item):
            return None

    MIGRATION_MODULES = DisableMigrations()

    # Cache en mémoire pour les tests
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "test-cache",
        }
    }

    # Désactiver le logging pour les tests
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "null": {
                "class": "logging.NullHandler",
            },
        },
        "root": {
            "handlers": ["null"],
        },
    }
