#!/usr/bin/env bash
set -e

# Variables de couleur
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç WaterBill API - Qualit√© du Code${NC}"

# Fonction pour v√©rifier si une commande existe
check_command() {
    if ! command -v "$1" &> /dev/null; then
        echo -e "${RED}‚ùå Erreur: '$1' n'est pas install√©. Veuillez l'installer avec: pip install $2${NC}"
        exit 1
    fi
}

# V√©rifier les outils de qualit√© essentiels
check_command "black" "black"
check_command "ruff" "ruff"
check_command "bandit" "bandit"

# V√©rifier les outils optionnels
if ! command -v safety &> /dev/null && ! command -v pip-audit &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Aucun outil de v√©rification des d√©pendances disponible.${NC}"
    echo -e "${YELLOW}   Installation recommand√©e: pip install safety ou pip install pip-audit${NC}"
fi


case "$1" in
    format)
        echo -e "${GREEN}üé® Formatage du code avec Black...${NC}"
        black . --line-length=88
        echo -e "${GREEN}‚úÖ Formatage termin√©.${NC}"
        ;;
    lint)
        echo -e "${GREEN}üîç Analyse du code avec Ruff...${NC}"
        ruff check . --fix
        echo -e "${GREEN}‚úÖ Analyse termin√©e.${NC}"
        ;;
    security)
        echo -e "${GREEN}üîí Analyse de s√©curit√© avec Bandit...${NC}"
        # Configuration optimis√©e via .bandit
        bandit -r . \
            -f json \
            -o bandit-report.json \
            --configfile .bandit
        echo -e "${GREEN}‚úÖ Rapport de s√©curit√© g√©n√©r√© dans bandit-report.json${NC}"
        ;;
    security-quick)
        echo -e "${GREEN}‚ö° Analyse de s√©curit√© rapide avec Bandit...${NC}"
        # Version rapide sans g√©n√©ration de rapport JSON
        bandit -r . \
            --configfile .bandit
        echo -e "${GREEN}‚úÖ Analyse de s√©curit√© rapide termin√©e${NC}"
        ;;
    deps)
        echo -e "${GREEN}üì¶ V√©rification des d√©pendances avec Safety...${NC}"
        if safety check --json --output safety-report.json 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Rapport de s√©curit√© des d√©pendances g√©n√©r√© dans safety-report.json${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Safety a rencontr√© une erreur. Tentative avec pip-audit...${NC}"
            if command -v pip-audit &> /dev/null; then
                pip-audit --format=json --output=safety-report.json
                echo -e "${GREEN}‚úÖ Rapport de s√©curit√© des d√©pendances g√©n√©r√© avec pip-audit${NC}"
            else
                echo -e "${RED}‚ùå Safety et pip-audit non disponibles. Installation recommand√©e: pip install pip-audit${NC}"
            fi
        fi
        ;;
    precommit)
        echo -e "${GREEN}ü™ù Ex√©cution des hooks pre-commit...${NC}"
        pre-commit run --all-files
        echo -e "${GREEN}‚úÖ Hooks pre-commit ex√©cut√©s.${NC}"
        ;;
    install-hooks)
        echo -e "${GREEN}ü™ù Installation des hooks pre-commit...${NC}"
        pre-commit install
        echo -e "${GREEN}‚úÖ Hooks pre-commit install√©s.${NC}"
        ;;
    all)
        echo -e "${GREEN}üöÄ Ex√©cution de tous les contr√¥les de qualit√©...${NC}"
        echo -e "${YELLOW}1/4 - Formatage...${NC}"
        black . --line-length=88 --check
        echo -e "${YELLOW}2/4 - Linting...${NC}"
        ruff check .
        echo -e "${YELLOW}3/4 - S√©curit√© (Bandit)...${NC}"
        bandit -r . \
            -f json \
            -o bandit-report.json \
            --configfile .bandit
        echo -e "${YELLOW}4/4 - D√©pendances (Safety)...${NC}"
        if safety check --json --output safety-report.json 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Tous les contr√¥les de qualit√© termin√©s.${NC}"
            echo -e "${BLUE}üìä Rapports g√©n√©r√©s:${NC}"
            echo -e "  - bandit-report.json (s√©curit√©)"
            echo -e "  - safety-report.json (d√©pendances)"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Safety a rencontr√© une erreur. Tentative avec pip-audit...${NC}"
            if command -v pip-audit &> /dev/null; then
                pip-audit --format=json --output=safety-report.json
                echo -e "${GREEN}‚úÖ Tous les contr√¥les de qualit√© termin√©s.${NC}"
                echo -e "${BLUE}üìä Rapports g√©n√©r√©s:${NC}"
                echo -e "  - bandit-report.json (s√©curit√©)"
                echo -e "  - safety-report.json (d√©pendances - pip-audit)"
            else
                echo -e "${GREEN}‚úÖ Contr√¥les de qualit√© termin√©s (safety ignor√©).${NC}"
                echo -e "${BLUE}üìä Rapports g√©n√©r√©s:${NC}"
                echo -e "  - bandit-report.json (s√©curit√©)"
                echo -e "${YELLOW}‚ö†Ô∏è  Safety non disponible - installation recommand√©e: pip install pip-audit${NC}"
            fi
        fi
        ;;
    fix)
        echo -e "${GREEN}üîß Correction automatique du code...${NC}"
        echo -e "${YELLOW}1/2 - Formatage automatique...${NC}"
        black . --line-length=88
        echo -e "${YELLOW}2/2 - Corrections automatiques...${NC}"
        ruff check . --fix
        echo -e "${GREEN}‚úÖ Corrections automatiques termin√©es.${NC}"
        ;;
    clean)
        echo -e "${GREEN}üßπ Nettoyage des fichiers de qualit√©...${NC}"
        rm -f bandit-report.json safety-report.json .mypy_cache/ 2>/dev/null || true
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.pyc" -delete 2>/dev/null || true
        echo -e "${GREEN}‚úÖ Nettoyage termin√©.${NC}"
        ;;
    *)
        echo -e "${YELLOW}Usage: ./scripts/quality.sh [format|lint|security|security-quick|deps|precommit|install-hooks|all|fix|clean]${NC}"
        echo -e "${BLUE}Commandes disponibles:${NC}"
        echo -e "  ${GREEN}format${NC}       - Formatage du code avec Black"
        echo -e "  ${GREEN}lint${NC}         - Analyse du code avec Ruff"
        echo -e "  ${GREEN}security${NC}     - Analyse de s√©curit√© avec Bandit (complet)"
        echo -e "  ${GREEN}security-quick${NC} - Analyse de s√©curit√© rapide avec Bandit"
        echo -e "  ${GREEN}deps${NC}         - V√©rification des d√©pendances avec Safety"
        echo -e "  ${GREEN}precommit${NC}    - Ex√©cution des hooks pre-commit"
        echo -e "  ${GREEN}install-hooks${NC} - Installation des hooks pre-commit"
        echo -e "  ${GREEN}all${NC}          - Tous les contr√¥les de qualit√©"
        echo -e "  ${GREEN}fix${NC}          - Corrections automatiques (format + lint)"
        echo -e "  ${GREEN}clean${NC}        - Nettoyage des fichiers de qualit√©"
        exit 1
        ;;
esac
