#!/usr/bin/env bash
# Script pour lancer WaterBill API en mode PRODUCTION avec Docker Compose
# Usage: ./scripts/prod.sh [command]

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'aide
show_help() {
    echo -e "${BLUE}WaterBill API - Script de production Docker${NC}"
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  up          Lancer les services en mode production (d√©faut)"
    echo "  down        Arr√™ter les services"
    echo "  restart     Red√©marrer les services"
    echo "  logs        Afficher les logs en temps r√©el"
    echo "  build       Reconstruire les images"
    echo "  shell       Acc√©der au conteneur web"
    echo "  db          Acc√©der √† PostgreSQL"
    echo "  migrate     Ex√©cuter les migrations Django"
    echo "  status      V√©rifier le statut des services"
    echo "  backup      Sauvegarder la base de donn√©es"
    echo "  restore     Restaurer la base de donn√©es"
    echo "  restore-env Restaurer le fichier .env original (DEBUG=True)"
    echo "  update      Mise √† jour compl√®te (build + restart)"
    echo "  help        Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0 up       # Lancer en mode production"
    echo "  $0 status   # V√©rifier le statut"
    echo "  $0 backup   # Sauvegarder la DB"
    echo ""
    echo -e "${RED}‚ö†Ô∏è  ATTENTION: Mode PRODUCTION - Soyez prudent !${NC}"
}

# V√©rifier que Docker Compose est disponible
check_docker_compose() {
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo -e "${RED}‚ùå Erreur: Docker Compose n'est pas install√© ou accessible${NC}"
        exit 1
    fi
}

# V√©rifier que les fichiers n√©cessaires existent
check_files() {
    if [ ! -f "docker-compose.yml" ]; then
        echo -e "${RED}‚ùå Erreur: docker-compose.yml non trouv√©${NC}"
        exit 1
    fi

    if [ ! -f ".env" ]; then
        echo -e "${RED}‚ùå Erreur: Fichier .env obligatoire en production${NC}"
        echo -e "${YELLOW}   Configurez vos variables d'environnement de production${NC}"
        exit 1
    fi

    # Forcer DEBUG=False en mode production
    if grep -q "DEBUG=True" .env 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  DEBUG=True d√©tect√©, passage automatique √† DEBUG=False pour la production${NC}"
        # Cr√©er une sauvegarde du fichier .env
        cp .env .env.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
        # Remplacer DEBUG=True par DEBUG=False
        sed -i 's/DEBUG=True/DEBUG=False/g' .env
        echo -e "${GREEN}‚úÖ DEBUG=False appliqu√© automatiquement${NC}"
    fi
}

# V√©rifier le statut des services
check_status() {
    echo -e "${BLUE}üìä Statut des services:${NC}"
    docker-compose -f docker-compose.yml ps
    echo ""
    echo -e "${BLUE}üìà Utilisation des ressources:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" $(docker-compose -f docker-compose.yml ps -q) 2>/dev/null || echo "Aucun conteneur en cours d'ex√©cution"
}

# Fonction principale
main() {
    local command=${1:-up}

    echo -e "${RED}üè≠ WaterBill API - Mode PRODUCTION${NC}"
    echo ""

    check_docker_compose
    check_files

    case $command in
        up)
            echo -e "${GREEN}üöÄ Lancement des services en mode production...${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è  V√©rification de la configuration de production...${NC}"

            # V√©rifications de s√©curit√© suppl√©mentaires
            if ! grep -q "SECRET_KEY=" .env || grep -q "your-secret-key" .env; then
                echo -e "${RED}‚ùå ERREUR: SECRET_KEY non configur√© ou par d√©faut !${NC}"
                exit 1
            fi

            docker-compose -f docker-compose.yml up -d
            echo -e "${GREEN}‚úÖ Services de production lanc√©s !${NC}"
            echo -e "${BLUE}üìä Acc√®s:${NC}"
            echo -e "  - API: http://localhost:8000"
            echo -e "  - Documentation: http://localhost:8000/api/docs/"
            echo ""
            echo -e "${YELLOW}üí° Commandes utiles:${NC}"
            echo -e "  $0 status  # V√©rifier le statut"
            echo -e "  $0 logs    # Voir les logs"
            echo -e "  $0 backup  # Sauvegarder la DB"
            ;;
        down)
            echo -e "${RED}üõë Arr√™t des services de production...${NC}"
            read -p "√ätes-vous s√ªr de vouloir arr√™ter les services de production ? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                docker-compose -f docker-compose.yml down
                echo -e "${GREEN}‚úÖ Services arr√™t√©s${NC}"

                # Proposer de restaurer le fichier .env original
                if ls .env.backup.* >/dev/null 2>&1; then
                    echo ""
                    read -p "Restaurer le fichier .env original (avec DEBUG=True) ? (y/N): " -n 1 -r
                    echo
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        latest_backup=$(ls -t .env.backup.* | head -n1)
                        cp "$latest_backup" .env
                        rm .env.backup.*
                        echo -e "${GREEN}‚úÖ Fichier .env restaur√© (DEBUG=True)${NC}"
                    fi
                fi
            else
                echo -e "${YELLOW}‚ùå Arr√™t annul√©${NC}"
            fi
            ;;
        restart)
            echo -e "${YELLOW}üîÑ Red√©marrage des services de production...${NC}"
            docker-compose -f docker-compose.yml restart
            echo -e "${GREEN}‚úÖ Services red√©marr√©s${NC}"
            ;;
        logs)
            echo -e "${BLUE}üìã Logs de production en temps r√©el (Ctrl+C pour quitter)${NC}"
            docker-compose -f docker-compose.yml logs -f
            ;;
        build)
            echo -e "${BLUE}üî® Reconstruction des images de production...${NC}"
            # Nettoyage des logs avant build pour √©viter de les copier
            echo -e "${YELLOW}üßπ Nettoyage des logs avant build...${NC}"
            rm -rf logs/ 2>/dev/null || true
            # Build optimis√© avec cache Docker BuildKit
            DOCKER_BUILDKIT=1 docker-compose -f docker-compose.yml build --parallel
            echo -e "${GREEN}‚úÖ Images reconstruites${NC}"
            ;;
        shell)
            echo -e "${BLUE}üêö Acc√®s au conteneur web de production...${NC}"
            docker-compose -f docker-compose.yml exec web bash
            ;;
        db)
            echo -e "${BLUE}üóÑÔ∏è  Acc√®s √† PostgreSQL de production...${NC}"
            docker-compose -f docker-compose.yml exec db psql -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-waterbill}
            ;;
        migrate)
            echo -e "${BLUE}üîÑ Ex√©cution des migrations Django en production...${NC}"
            docker-compose -f docker-compose.yml exec web python manage.py migrate
            echo -e "${GREEN}‚úÖ Migrations termin√©es${NC}"
            ;;
        status)
            check_status
            ;;
        backup)
            echo -e "${BLUE}üíæ Sauvegarde de la base de donn√©es...${NC}"
            local backup_file="backup_$(date +%Y%m%d_%H%M%S).sql"
            docker-compose -f docker-compose.yml exec db pg_dump -U ${POSTGRES_USER:-postgres} ${POSTGRES_DB:-waterbill} > "$backup_file"
            echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e: $backup_file${NC}"
            ;;
        restore)
            echo -e "${RED}‚ö†Ô∏è  Restauration de la base de donn√©es...${NC}"
            read -p "Fichier de sauvegarde √† restaurer: " backup_file
            if [ ! -f "$backup_file" ]; then
                echo -e "${RED}‚ùå Fichier non trouv√©: $backup_file${NC}"
                exit 1
            fi
            read -p "√ätes-vous s√ªr de vouloir restaurer la base de donn√©es ? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                docker-compose -f docker-compose.yml exec -T db psql -U ${POSTGRES_USER:-postgres} ${POSTGRES_DB:-waterbill} < "$backup_file"
                echo -e "${GREEN}‚úÖ Base de donn√©es restaur√©e${NC}"
            else
                echo -e "${YELLOW}‚ùå Restauration annul√©e${NC}"
            fi
            ;;
        update)
            echo -e "${BLUE}üîÑ Mise √† jour compl√®te de production...${NC}"
            echo -e "${YELLOW}1. Arr√™t des services...${NC}"
            docker-compose -f docker-compose.yml down
            echo -e "${YELLOW}2. Nettoyage des logs avant build...${NC}"
            rm -rf logs/ 2>/dev/null || true
            echo -e "${YELLOW}3. Reconstruction des images...${NC}"
            docker-compose -f docker-compose.yml build --no-cache
            echo -e "${YELLOW}4. Red√©marrage des services...${NC}"
            docker-compose -f docker-compose.yml up -d
            echo -e "${YELLOW}5. Ex√©cution des migrations...${NC}"
            docker-compose -f docker-compose.yml exec web python manage.py migrate
            echo -e "${GREEN}‚úÖ Mise √† jour termin√©e${NC}"
            ;;
        restore-env)
            echo -e "${BLUE}üîÑ Restauration du fichier .env original...${NC}"
            if ls .env.backup.* >/dev/null 2>&1; then
                latest_backup=$(ls -t .env.backup.* | head -n1)
                echo -e "${YELLOW}üìÅ Fichier de sauvegarde trouv√©: $latest_backup${NC}"
                cp "$latest_backup" .env
                rm .env.backup.*
                echo -e "${GREEN}‚úÖ Fichier .env restaur√© (DEBUG=True)${NC}"
                echo -e "${BLUE}üí° Vous pouvez maintenant lancer le mode d√©veloppement${NC}"
            else
                echo -e "${RED}‚ùå Aucune sauvegarde de .env trouv√©e${NC}"
                echo -e "${YELLOW}   Les sauvegardes sont cr√©√©es automatiquement lors du lancement en production${NC}"
            fi
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Commande inconnue: $command${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Ex√©cuter la fonction principale avec tous les arguments
main "$@"
