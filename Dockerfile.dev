# Dockerfile optimisé pour le développement
# Utilise le multi-stage build avec cache des dépendances

# Stage 1: Dependencies - Cache des dépendances Python
FROM python:3.12-slim AS dependencies

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

WORKDIR /app

# Installer les outils de build (optimisé)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    curl \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Créer un environnement virtuel
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copier et installer les dépendances (cache optimisé)
COPY requirements.txt /app/requirements.txt
COPY requirements-dev.txt /app/requirements-dev.txt

# Installer les dépendances (requirements-dev.txt inclut déjà requirements.txt)
RUN pip install --upgrade pip \
    && pip install --no-deps -r requirements-dev.txt \
    && pip check

# Stage 2: Development - Image de développement
FROM python:3.12-slim AS development

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    DJANGO_RUNSERVER=1

WORKDIR /app

# Installer les dépendances runtime (optimisé)
RUN apt-get update && apt-get install -y --no-install-recommends \
    bash \
    ca-certificates \
    curl \
    git \
    libpq5 \
    tzdata \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copier l'environnement virtuel
COPY --from=dependencies /opt/venv /opt/venv

# Créer un user non-root
RUN useradd -m appuser && chown -R appuser:appuser /app
USER appuser

# Exposé pour le serveur de développement
EXPOSE 8000

# Entrypoint pour le développement
ENTRYPOINT ["/bin/bash", "/app/docker/entrypoint.sh"]
