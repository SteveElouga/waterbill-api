"""
Gateways SMS pour WaterBill API.

Ce module d√©finit l'interface et les impl√©mentations
pour l'envoi de SMS d'activation.
"""

import logging
import os
from abc import ABC, abstractmethod
from typing import Union

logger = logging.getLogger(__name__)


class ISmsGateway(ABC):
    """
    Interface abstraite pour l'envoi de SMS.

    D√©finit le contrat que doivent respecter toutes les impl√©mentations
    de gateways SMS (Twilio, etc.).
    """

    @abstractmethod
    def send_activation_code(self, phone: str, code: str) -> bool:
        """
        Envoie un code d'activation par SMS.

        Args:
            phone: Num√©ro de t√©l√©phone de destination
            code: Code d'activation √† envoyer

        Returns:
            bool: True si l'envoi a r√©ussi, False sinon

        Raises:
            Exception: En cas d'erreur d'envoi
        """
        pass

    @abstractmethod
    def send_verification_code(
        self, phone: str, code: str, operation_type: str, redirect_url: str = None
    ) -> bool:
        """
        Envoie un code de v√©rification par SMS pour une op√©ration sp√©cifique.

        Args:
            phone: Num√©ro de t√©l√©phone de destination
            code: Code de v√©rification √† envoyer
            operation_type: Type d'op√©ration (password_reset, password_change, phone_change)
            redirect_url: URL de redirection avec token (optionnel)

        Returns:
            bool: True si l'envoi a r√©ussi, False sinon

        Raises:
            Exception: En cas d'erreur d'envoi
        """
        pass

    @abstractmethod
    def send_confirmation_message(
        self, phone: str, operation_type: str, details: str = None
    ) -> bool:
        """
        Envoie un SMS de confirmation apr√®s une op√©ration r√©ussie.

        Args:
            phone: Num√©ro de t√©l√©phone de destination
            operation_type: Type d'op√©ration effectu√©e
            details: D√©tails suppl√©mentaires (optionnel)

        Returns:
            bool: True si l'envoi a r√©ussi, False sinon

        Raises:
            Exception: En cas d'erreur d'envoi
        """
        pass

    @abstractmethod
    def is_available(self) -> bool:
        """
        V√©rifie si le gateway SMS est disponible.

        Returns:
            bool: True si disponible, False sinon
        """
        pass


class DummySmsGateway(ISmsGateway):
    """
    Impl√©mentation mock du gateway SMS pour le d√©veloppement.

    En mode d√©veloppement, les SMS sont logg√©s au lieu d'√™tre envoy√©s.
    """

    def send_activation_code(self, phone: str, code: str) -> bool:
        """
        Simule l'envoi d'un SMS d'activation.

        Args:
            phone: Num√©ro de t√©l√©phone de destination
            code: Code d'activation √† envoyer

        Returns:
            bool: True (simulation d'envoi r√©ussi)
        """
        logger.info(f"üì± SMS SIMUL√â - Code d'activation pour {phone}: {code}")
        print(f"üîê Code d'activation pour {phone}: {code}")
        return True

    def send_verification_code(
        self, phone: str, code: str, operation_type: str, redirect_url: str = None
    ) -> bool:
        """
        Simule l'envoi d'un SMS de v√©rification.

        Args:
            phone: Num√©ro de t√©l√©phone de destination
            code: Code de v√©rification √† envoyer
            operation_type: Type d'op√©ration
            redirect_url: URL de redirection avec token (optionnel)

        Returns:
            bool: True (simulation d'envoi r√©ussi)
        """
        messages = {
            "password_reset": "r√©initialisation de mot de passe",
            "password_change": "changement de mot de passe",
            "phone_change": "changement de num√©ro de t√©l√©phone",
        }

        operation_name = messages.get(operation_type, operation_type)

        if redirect_url:
            logger.info(
                f"üì± SMS SIMUL√â - Code de v√©rification pour {operation_name} - {phone}: {code}"
            )
            logger.info(f"üîó Lien de redirection: {redirect_url}")
            print(f"üîê Code de v√©rification pour {operation_name} - {phone}: {code}")
            print(f"üîó Lien: {redirect_url}")
        else:
            logger.info(
                f"üì± SMS SIMUL√â - Code de v√©rification pour {operation_name} - {phone}: {code}"
            )
            print(f"üîê Code de v√©rification pour {operation_name} - {phone}: {code}")

        return True

    def send_confirmation_message(
        self, phone: str, operation_type: str, details: str = None
    ) -> bool:
        """
        Simule l'envoi d'un SMS de confirmation.

        Args:
            phone: Num√©ro de t√©l√©phone de destination
            operation_type: Type d'op√©ration effectu√©e
            details: D√©tails suppl√©mentaires (optionnel)

        Returns:
            bool: True (simulation d'envoi r√©ussi)
        """
        messages = {
            "password_reset": "Votre mot de passe a √©t√© r√©initialis√© avec succ√®s.",
            "password_change": "Votre mot de passe a √©t√© chang√© avec succ√®s.",
            "phone_change": "Votre num√©ro de t√©l√©phone a √©t√© chang√© avec succ√®s.",
        }

        message = messages.get(operation_type, f"Op√©ration {operation_type} confirm√©e.")

        if details:
            message += f" {details}"

        logger.info(f"üì± SMS SIMUL√â - Confirmation - {phone}: {message}")
        print(f"‚úÖ Confirmation - {phone}: {message}")
        return True

    def is_available(self) -> bool:
        """
        V√©rifie si le gateway est disponible.

        Returns:
            bool: True (toujours disponible en mode d√©veloppement)
        """
        return True


class TwilioSmsGateway(ISmsGateway):
    """
    Impl√©mentation Twilio pour l'envoi de SMS r√©els.

    Cette impl√©mentation n√©cessite la configuration Twilio
    dans les variables d'environnement.
    """

    def __init__(self):
        """
        Initialise le gateway Twilio.

        Raises:
            ImportError: Si twilio n'est pas install√©
            ValueError: Si les credentials ne sont pas configur√©s
        """
        try:
            from twilio.rest import Client
        except ImportError:
            raise ImportError(
                "Twilio n'est pas install√©. Installez avec: pip install twilio"
            )

        # Configuration depuis les variables d'environnement
        account_sid = os.getenv("TWILIO_ACCOUNT_SID")
        auth_token = os.getenv("TWILIO_AUTH_TOKEN")
        from_number = os.getenv("TWILIO_FROM_NUMBER")

        print(f"account_sid: {account_sid}")
        print(f"auth_token: {auth_token}")
        print(f"from_number: {from_number}")

        if not all([account_sid, auth_token, from_number]):
            raise ValueError(
                "Variables d'environnement Twilio manquantes: "
                "TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_FROM_NUMBER"
            )

        self.client = Client(account_sid, auth_token)
        self.from_number = from_number

    def send_activation_code(self, phone: str, code: str) -> bool:
        """
        Envoie un code d'activation via Twilio.

        Args:
            phone: Num√©ro de t√©l√©phone de destination
            code: Code d'activation √† envoyer

        Returns:
            bool: True si l'envoi a r√©ussi

        Raises:
            Exception: En cas d'erreur Twilio
        """
        try:
            message = (
                f"Votre code d'activation WaterBill est: {code}. "
                f"Ce code expire dans 10 minutes. Ne partagez pas ce code."
            )

            message = self.client.messages.create(
                body=message,
                from_=self.from_number,
                to=phone,
            )

            logger.info(
                f"SMS envoy√© via Twilio - SID: {message.sid}, Destinataire: {phone}"
            )
            return True

        except Exception as e:
            logger.error(f"Erreur envoi SMS Twilio pour {phone}: {str(e)}")
            raise

    def send_verification_code(
        self, phone: str, code: str, operation_type: str, redirect_url: str = None
    ) -> bool:
        """
        Envoie un code de v√©rification via Twilio.

        Args:
            phone: Num√©ro de t√©l√©phone de destination
            code: Code de v√©rification √† envoyer
            operation_type: Type d'op√©ration
            redirect_url: URL de redirection avec token (optionnel)

        Returns:
            bool: True si l'envoi a r√©ussi

        Raises:
            Exception: En cas d'erreur Twilio
        """
        try:
            messages = {
                "password_reset": "r√©initialisation de mot de passe",
                "password_change": "changement de mot de passe",
                "phone_change": "changement de num√©ro de t√©l√©phone",
            }

            operation_name = messages.get(operation_type, operation_type)

            if redirect_url:
                message = (
                    f"Votre code de v√©rification pour {operation_name} WaterBill est: {code}. "
                    f"Lien de redirection: {redirect_url}. "
                    f"Ce code expire dans 10 minutes. Ne partagez pas ce code."
                )
            else:
                message = (
                    f"Votre code de v√©rification pour {operation_name} WaterBill est: {code}. "
                    f"Ce code expire dans 10 minutes. Ne partagez pas ce code."
                )

            message = self.client.messages.create(
                body=message,
                from_=self.from_number,
                to=phone,
            )

            logger.info(
                f"SMS de v√©rification envoy√© via Twilio - SID: {message.sid}, "
                f"Destinataire: {phone}, Op√©ration: {operation_type}"
            )
            return True

        except Exception as e:
            logger.error(
                f"Erreur envoi SMS de v√©rification Twilio pour {phone}: {str(e)}"
            )
            raise

    def send_confirmation_message(
        self, phone: str, operation_type: str, details: str = None
    ) -> bool:
        """
        Envoie un SMS de confirmation via Twilio.

        Args:
            phone: Num√©ro de t√©l√©phone de destination
            operation_type: Type d'op√©ration effectu√©e
            details: D√©tails suppl√©mentaires (optionnel)

        Returns:
            bool: True si l'envoi a r√©ussi

        Raises:
            Exception: En cas d'erreur Twilio
        """
        try:
            messages = {
                "password_reset": "Votre mot de passe a √©t√© r√©initialis√© avec succ√®s.",
                "password_change": "Votre mot de passe a √©t√© chang√© avec succ√®s.",
                "phone_change": "Votre num√©ro de t√©l√©phone a √©t√© chang√© avec succ√®s.",
            }

            message = messages.get(
                operation_type, f"Op√©ration {operation_type} confirm√©e."
            )

            if details:
                message += f" {details}"

            # Ajouter un message de s√©curit√©
            message += (
                " Si vous n'avez pas effectu√© cette action, contactez le support."
            )

            message = self.client.messages.create(
                body=message,
                from_=self.from_number,
                to=phone,
            )

            logger.info(
                f"SMS de confirmation envoy√© via Twilio - SID: {message.sid}, "
                f"Destinataire: {phone}, Op√©ration: {operation_type}"
            )
            return True

        except Exception as e:
            logger.error(
                f"Erreur envoi SMS de confirmation Twilio pour {phone}: {str(e)}"
            )
            raise

    def is_available(self) -> bool:
        """
        V√©rifie si Twilio est disponible.

        Returns:
            bool: True si les credentials sont configur√©s
        """
        try:
            # Test simple de connexion
            self.client.api.accounts(self.client.auth[0]).fetch()
            return True
        except Exception:
            return False


def clean_token(token: Union[str, None]) -> Union[str, None]:
    """
    Nettoie un token UUID des caract√®res invisibles et espaces.

    Args:
        token: Token UUID potentiellement pollu√©

    Returns:
        str | None: Token nettoy√© et pr√™t √† l'utilisation
    """
    if not token:
        return token

    # Supprimer les caract√®res invisibles Unicode courants
    invisible_chars = [
        "\u2060",  # WORD JOINER
        "\u200B",  # ZERO WIDTH SPACE
        "\u200C",  # ZERO WIDTH NON-JOINER
        "\u200D",  # ZERO WIDTH JOINER
        "\uFEFF",  # ZERO WIDTH NO-BREAK SPACE (BOM)
        " ",  # SPACE normal
        "\t",  # TAB
        "\n",  # NEWLINE
        "\r",  # CARRIAGE RETURN
    ]

    cleaned_token = str(token)
    for char in invisible_chars:
        cleaned_token = cleaned_token.replace(char, "")

    return cleaned_token


def generate_redirect_url(token: str, operation_type: str, base_url: str = None) -> str:
    """
    G√©n√®re une URL de redirection avec token nettoy√© pour les op√©rations de s√©curit√©.

    Args:
        token: Token UUID de l'op√©ration (sera automatiquement nettoy√©)
        operation_type: Type d'op√©ration (password_reset, password_change, phone_change)
        base_url: URL de base de l'application (optionnel)

    Returns:
        str: URL de redirection compl√®te avec token nettoy√©
    """
    # Nettoyer le token automatiquement
    clean_token_value = clean_token(token)

    if not base_url:
        from django.conf import settings

        # Utiliser l'URL de base depuis les settings ou une valeur par d√©faut
        base_url = getattr(settings, "FRONTEND_URL", "https://waterbill.app")

    endpoints = {
        "password_reset": "/reset-password",
        "password_change": "/change-password",
        "phone_change": "/change-phone",
    }

    endpoint = endpoints.get(operation_type, "/verify")
    return f"{base_url}{endpoint}?token={clean_token_value}"


def get_sms_gateway() -> ISmsGateway:
    """
    Factory function pour obtenir le gateway SMS appropri√©.

    Retourne DummySmsGateway en d√©veloppement et TwilioSmsGateway
    en production selon la configuration.

    Returns:
        ISmsGateway: Instance du gateway SMS
    """
    from django.conf import settings

    # En mode d√©veloppement ou si Twilio n'est pas configur√©
    if settings.DEBUG or not all(
        [
            os.getenv("TWILIO_ACCOUNT_SID"),
            os.getenv("TWILIO_AUTH_TOKEN"),
            os.getenv("TWILIO_FROM_NUMBER"),
        ]
    ):
        return DummySmsGateway()

    # En production avec Twilio configur√©
    try:
        return TwilioSmsGateway()
    except (ImportError, ValueError) as e:
        logger.warning(f"Twilio non disponible, utilisation du dummy: {e}")
        return DummySmsGateway()
